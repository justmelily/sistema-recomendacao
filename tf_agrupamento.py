# -*- coding: utf-8 -*-
"""TF_agrupamento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-T-f_9u1WFPou0_wk1YkogzdYI755DwD
"""

#biblíotecas
import numpy as np
from sklearn.cluster import KMeans

#importar variaveis
filmes_assistidos = np.array ([
    [1,0,0,1,0,1,0],
    [1,1,0,0,0,0,0],
    [0,1,1,0,1,0,1],
    [0,0,1,1,1,1,0],
    [1,0,1,0,1,0,0],
    [0,1,0,1,1,1,1],
    [1,0,1,0,0,1,0],
    [0,0,0,1,0,1,1],
    [1,0,1,0,0,1,0]
])

#definindo o número de clusters
num_clusters = 2

#inicializando o modelo
kmeans = KMeans (n_clusters=num_clusters, random_state=0, n_init=10)

#treinando o modelo
kmeans.fit(filmes_assistidos)

#Classificação dos usuários
grupos_indice = kmeans.predict(filmes_assistidos)

#exibir os dados
print("Usuário pertence ao seguinte grupo")
for i, cluster in enumerate(grupos_indice):
  print(f"Usuário (i+1) pertence ao grupo {cluster+1}")

print("\nfilmes assistidos")
for i in range(len(filmes_assistidos)):
  assistidos = np.where(filmes_assistidos[i] == 1)[0] + 1
  print(f"usuários {i+1} assistiu aos filmes: {assistidos}")

  #função que recomenda filmes
  def recomendar_filmes(filmes, filmes_assistidos, grupos_indice):
    filmes = np.array(filmes)

    #encontrar o grupo do usuário com base em seu vetor de filme assistidos
    usuario_id = len(filmes_assistidos)
    grupo_usuario = kmeans.predict([filmes])[0]

    #encontrar todos os usuários no mesmo grupo
    usuarios_no_mesmo_grupo = [i for i in range(len(grupos_indice))
    if grupos_indice[i] == grupo_usuario]

    #filmes assistidos pelos usuários no mesmo grupo
    filmes_recomendados = set()
    for usuario in usuarios_no_mesmo_grupo:
      filmes_assistidos_usuarios = np.where(filmes_assistidos[usuario] == 1)[0]
      filmes_recomendados.update(filmes_assistidos_usuarios)

    #remover filmes que o usuário já assistiu
    filmes_recomendados = filmes_recomendados

    #ajustar os índices dos filmes recomendados (de volta para 1-based)
    filmes_recomendados = [filmes + 1 for filmes in filmes_recomendados]

    return sorted(filmes_recomendados)

#exemplo de uso da função recomendar_filmes
filmes_assistidos_usuarios = [1, 0, 1, 0]

#vetor de filmes assistidos(por exemplo, assistiu aos filmes 1 e 3)
filmes_recomendados = recomendar_filmes(filmes_assistidos_usuarios,
                                        filmes_assistidos, grupos_indice)

print(f"\nfilmes recomendados: {filmes_recomendados}")